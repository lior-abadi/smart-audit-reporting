[
  {
    "type": "404",
    "label": "not-found",
    "title": "Finding missing in the database",
    "prompt": "The finding is missing in the database, has a typo or the wrong type of severity",
    "path": ""
  },

  {
    "type": "gas",
    "label": "iter-incr",
    "title": "Iterators could be increased differently",
    "prompt": "Using ++i instead of i++ as the way to increase the iterator saves gas due to the fact that does not store temporarily the increased counter before returning it, returning the already increased counter instead.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "use-custom-error",
    "title": "Use custom errors instead of revert strings",
    "prompt": "Custom errors available from <code>0.8.4</code> provide a clear and cheaper way of reverting saving around <code>50 gas</code> per reversal. Also they provide a cleaner feedback to the user if defined properly in a descriptive way.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "unchecked",
    "title": "Wrap counter modification within an unchecked block",
    "prompt": "Increasing or decreasing the counter or any other number that has no risk of overflowing/underflowing inside an unchecked statement removes the compiler built-in checks saving gas each time the number is modified.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "avoid-using-this",
    "title": "Using <code>this</code> keyword for calling external functions waste gas",
    "prompt": "If a function is needed to be available either internally and externally, it should be declared as <code>public</code> instead of external. Using the <code>this</code> keyword for calling external functions wastes overhead gas.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "multiple-mappings",
    "title": "Multiple mappings could be combined",
    "prompt": "If there are used mappings with repeated types of keys, it is a sign that they could be refactored into a single mapping that points to a struct when appropriate. Depending on the data types and their sizes, this could avoid triggering a Gsset operation (consumes 20,000 gas while changing from zero to a non zero value). Because memory slots are calculated via <code>keccak256</code>, reducing the amount of slots also reduce for the compiler the need to compute the keys' hash.",
    "path": ""
  }, 
  {
    "type": "gas",
    "label": "uncapped-manipulable-string",
    "title": "Users can manipulate string chain size",
    "prompt": "Users can freely use string chains with uncapped size. When the <code>32 bytes</code> slot size is exceeded, a new slow will be used to render and store that string. In order to provide a better user experience, it is advisable to constraint the user-input string size.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "constructed-variables-should-be-immutable",
    "title": "Variables set only while constructing should be <code>immutable</code>",
    "prompt": "This operation reduces the gas cost each time a variable is consulted and also avoids a Gsset (20,000 gas) while constructing. ",
    "path": ""
  }, 
  {
    "type": "gas",
    "label": "pack-variables-on-struct",
    "title": "Struct variables could be packed",
    "prompt": "Each storage slot has <code>256bits</code> or <code>32bytes</code>. If two or more subsequent variables fit on the same slot (e.g. <code>uint128</code> <code>uint128</code>), they will be concatenated saving space and reducing the need to append another slot saving extra Gssets (20,000 gas units).",
    "path": ""
  }, 
  {
    "type": "gas",
    "label": "cache-variable",
    "title": "Cache state variables in stack instead of constantly reading them from storage.",
    "prompt": "State variables that are consulted several times during an execution could be cached into the memory stack in order to prevent reading them from storage. Accessing a state variable for the first time <code>Gcoldsload</code> uses <code>2,100 gas</code> and then <code>Gwarmaccess</code> uses <code>100 gas</code> for the subsequent calls. ",
    "path": ""
  }, 
  {
    "type": "gas",
    "label": "cache-array-length",
    "title": "Cache the array length before looping if it is fixed.",
    "prompt": "If a fixed-length array is meant to be looped over, its size could be cache before looping saving per loop (excluding the first one which access the data in cold) a <code>Gwarmaccess</code> (100 gas), a <code>MLOAD</code> for memory arrays (3 gas) and <code>CALLDATALOAD</code> for calldata arrays (3 gas)",
    "path": ""
  },
  {
    "type": "gas",
    "label": "long-revert-string",
    "title": "Revert strings that exceed 32 bytes use more slots.",
    "prompt": "Each memory slot has 32 bytes. If a revert string size exceeds this limit, more slots will be used incurring in an <code>MSTORE</code> (adding up <code>3 gas</code> consumption). It is advised also using custom errors as for solidity 0.8.x which provide a clear and cheap way of reverting.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "private-for-constants",
    "title": "Constants that are <code>private</code> instead of <code>public</code> save gas.",
    "prompt": "Because constant variables should be declared an initialized as a one-liner, their value could be easily retrieved by reading directly the source code. Removing the <code>public</code> modifier and using <code>private</code> instead, does not create a function getter for the public constant saving around <code>3500 gas</code> on deployment.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "emit-function-parameters",
    "title": "Emitting function parameters instead of cache values",
    "prompt": "While emitting events, passing them cache values from contracts instead of passing directly the function input parameters use unnecessary SLOADs. Avoid this by passing to the emitted event input parameters whenever it's possible.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "use-self-truthiness",
    "title": "Boolean variables could be self compared within conditional or require statements",
    "prompt": "Comparing a boolean variable against true or false (<code>require(myBoolean == true)</code>) could be replaced by (<code>require(myBoolean)</code>), the same applies for conditional statements. Whenever falsy values are meant to be compared the <code>!</code> sign could be used.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "use-unequal-instead",
    "title": "Comparing a <code>uint</code> with <code>!=</code> is cheaper than using <code>></code> ",
    "prompt": "For unsigned integers, it is cheaper to check that they are non zero values with the unequal operator rather than checking their greatness. While compiling with the optimizer enabled this change saves around <code>6 gas</code>.",
    "path": ""
  },
  {
    "type": "gas",
    "label": "shift-dont-divide-by-two",
    "title": "Bit shifting is cheaper than dividing by two",
    "prompt": "Dividing by two (<code>X / 2</code>) is the same as single bit right shifting (<code>X >> 1</code>). This is because the division consumes 20 more gas while performing the <code>JUMPs</code> that are not performed while bit shifting.",
    "path": ""
  },


  {
    "type": "n",
    "label": "two-step-process",
    "title": "Key protocol role transfer should be a two step process",
    "prompt": "Currently the transfer of key roles within the codebase is made on a single step. If an address is mistakenly given, ownership and/or control may be irreversibly lost. Make this a two step process.",
    "path": ""
  },
  {
    "type": "n",
    "label": "indexed-events",
    "title": "No indexed parameters while emitting events",
    "prompt": "Some events within the codebase lack from key indexed parameters. The usage of indexed parameters makes off-chain filtering possible. It is advised adding at least one relevant indexed parameter per emitted event.",
    "path": ""
  },
  {
    "type": "n",
    "label": "centralized-logic",
    "title": "The allowed role has too much power over some actions",
    "prompt": "There are some functions that have considerable impact within the community that compromise de decentralization of the protocol and deposit too much trust on the approved caller of that function. In order to build trustless protocols, there should not be a role holding too much power or whose decisions have breaking impact on the community.",
    "path": ""
  },
  {
    "type": "n",
    "label": "inconsistent-error-handling",
    "title": "Inconsistent ways of execution reverting/error handling",
    "prompt": "There are several parts of the codebase where <code>require</code> statements with a revert string is used, and some other parts where <code>if statements</code> with custom errors are used. It is advised to unify the criteria regarding error handling. It is remarked that the boolean check needs to be inverted while going from one method to another (the require reverts on false statements whereas true statements trigger custom errors inside if statements). Also, as a reminder, using custom errors from <code>0.8.x</code> provide a clear feedback to users while saving gas against error strings.",
    "path": ""
  },
  {
    "type": "n",
    "label": "reentrancy-modifier-order",
    "title": "The reentrancy prevention modifier should appear before any other modifier",
    "prompt": "It is a good practice to check reentrancy first before any other check or calculus performed within modifiers to provide a better security to the protected function.",
    "path": ""
  },
  {
    "type": "n",
    "label": "external-instead-of-public",
    "title": "Public functions that are not called by the contract should be external",
    "prompt": "If a function is not meant to be called inside a contract, it should be marked as external instead. According to the [Solidity Docs](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) an inherited virtual external function can be overridden and its behavior can be changed as public.",
    "path": ""
  },
  {
    "type": "n",
    "label": "avoid-assembly",
    "title": "Avoid using in line assembly for available built-in methods",
    "prompt": "Using inline assembly for methods that are built-in within the current compiler versions avoid the need to use assembly which can make some compilers to interpret the code as complex. It is advised using inline assembly only when there is no other way to perform the intended behavior or when specific goals are meant to be achieved (such as optimizations).",
    "path": ""
  },
  {
    "type": "n",
    "label": "avoid-magic-numbers",
    "title": "Constants should be declared instead of magic numbers",
    "prompt": "While using constants across the codebase as comparing values, boundaries, among others; it is advisable to declare a self-explanatory constant instead of using numeric literals to provide more transparency.",
    "path": ""
  },
  {
    "type": "n",
    "label": "immutable-instead-of-constant",
    "title": "Expressions that compute constant values via subsequent calls such as <code>keccak256</code> could be declared as immutable",
    "prompt": "The main difference between both variable availability modifiers is that the <code>constant</code> calculates the hash each time it is referenced whereas <code>immutable</code> performs this calculation on deployment. More about this could be read [here](https://github.com/ethereum/solidity/issues/9232#issuecomment-646131646).",
    "path": ""
  },
  {
    "type": "n",
    "label": "use-scientific-notation",
    "title": "Use scientific notation (1e8) instead of exponential notation (1 * 10**8)",
    "prompt": "For large numbers it is more readable and understandable the scientific notation rather than the exponentiation (which essentially can be mistakenly interpreted as multiplication by a glance).",
    "path": ""
  },
  {
    "type": "n",
    "label": "only-caps-for-constants",
    "title": "Capped variable names should be reserved for constant or immutable variables",
    "prompt": "For the scenarios where the variable name should differ depending its origin, a pure or view function could be used instead to make this differentiation. Openzeppelin performs this strategy [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59)",
    "path": ""
  },
  {
    "type": "n",
    "label": "file-missing-natspec",
    "title": "File Missing Natspec",
    "prompt": "It is important adding Natspec to every contract explaining their purpose and what they are intended to do.",
    "path": ""
  },
  {
    "type": "n",
    "label": "avoid-ecrecover-directly",
    "title": "Signatures recovered directly with <code>ecrecover()</code> can be malleable",
    "prompt": "It is advisable to consider using a third party library that avoids any signature malleability scenario that may occur while recovering signatures directly with <code>ecrecover()</code> (such as OpenZeppelin's <code>ECDSA</code>).",
    "path": ""
  },
  {
    "type": "n",
    "label": "use-time-units",
    "title": "Time based variables should use built-in time units",
    "prompt": "The compiler provides [built-in time based units](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units) which values are expressed as seconds in the end. There are available suffixes like <code>seconds</code>, <code>minutes</code>, <code>hours</code>, <code>days</code> and <code>weeks</code> that could be used after literal numbers.",
    "path": ""
  },
  {
    "type": "n",
    "label": "long-line-of-code",
    "title": "Long Lines of Code",
    "prompt": "Some lines of code are too long. In favour of readability and a better experience while reading the code, it is advisable to determine a character limit per line of code in order to prevent users from right-left scrolling in order to read a full line. Currently, Github adds a lateral scroll bar at 164 chars.",
    "path": ""
  },
  {
    "type": "n",
    "label": "wrong-token-name",
    "title": "Change token name on deployment",
    "prompt": "The following lines contain a token deployment with a name that appears to be used only for testing. If this token will be deployed on production, review its name.",
    "path": ""
  },
  {
    "type": "n",
    "label": "remove-hardhat-console",
    "title": "Remove the import of <code>hardhat/console.sol</code>",
    "prompt": "Currently the codebase has imports that are only used on development. Remove the mentioned import and any other import across not only contracts but also config files that should be used only on development.",
    "path": ""
  },
  {
    "type": "n",
    "label": "inconsistent-floating-pragma",
    "title": "Inconsistent way of declaring the pragma version",
    "prompt": "The codebase mixes the ways <code>pragma</code> version is declared. Commonly codebases declare the pragma version with <code>^</code> or strictly. It is advised to unify the criteria regarding this issue.",
    "path": ""
  },
  {
    "type": "n",
    "label": "missing-spdx",
    "title": "Missing SPDX License Identifier",
    "prompt": "It is a good practice to specify under which license is a contract deployed, and if no license is meant to be used the UNLICENSED identifier could be declared.",
    "path": ""
  },
  {
    "type": "n",
    "label": "function-missing-natspec",
    "title": "Function or public variable with missing or incomplete natspec",
    "prompt": "Providing a complete, clear and understandable natspec on each function and public variable is a good practice that helps other devs and non-devs to understand quicker and better what is a function or variable intending to do/return. With functions, explain their intended behavior, returns and input parameters when applies. For public variables, what do they mean. The following instance(s) have incomplete or missing natspec.",
    "path": ""
  },
  {
    "type": "n",
    "label": "modifier-instead-of-require",
    "title": "Repeated <code>require</code> statements or gate controls could be refactored to a modifier",
    "prompt": "Whenever the same checks are needed to be performed many times across the codebase, it is advised to refactor them as modifiers or even functions in favour of readability and performance of the code.",
    "path": ""
  },
  {
    "type": "n",
    "label": "iscontract-usage",
    "title": "Usage of <code>isContract</code> or similar",
    "prompt": "It is an already known behavior that calls coming from the constructor while deploying a contract will appear to come as if they were coming from an EOA because the <code>codesize</code> is injected later on construction. It is advised to provide a well commented and addressed documentation regarding under which circumstances this function will be used (e.g. as an access control, function logic branching, etc.) and evaluate if the chance to circumvent this check with the ways mentioned before imply an issue for the protocol.",
    "path": ""
  },


  {
    "type": "low",
    "label": "transfer-lack-return-check",
    "title": "Lack of boolean return check on transfer or transferFrom",
    "prompt": "There are some implementations of ERC20 tokens that do not revert if a transfer fails. Each transfer method has a boolean return that points to its success (or failure) and it is returned after a transfer is performed. If their return value is not checked a transfer may be failing silently having uncertain outcomes ranging from leaks of value to massive thefts. It is advisable wrapping each call to <code>transfer</code> and <code>transferFrom</code> with a <code>require</code> statement to enforce their truth.",
    "path": ""
  },
  {
    "type": "low",
    "label": "require-instead-of-assert",
    "title": "Avoid using <code>assert</code>, use <code>require</code> instead",
    "prompt": "According to the [Solidity Doc about control structures](https://docs.soliditylang.org/en/v0.8.14/control-structures.html#panic-via-assert-and-error-via-require). The assert function creates an error of type <code>Panic(uint256)</code>. Assert should only be used to test for internal errors, and to check invariants. Properly functioning code should never create a Panic, not even on invalid external input. If this happens, then there is a bug in your contract which you should fix.",
    "path": ""
  },
  {
    "type": "low",
    "label": "use-safe-transferfrom-nfts",
    "title": "Avoid using <code>transferFrom()</code> for NFTs, use safe libraries instead",
    "prompt": "The main difference between safe transfer libraries and transfers out-of-the-box from ERC standards are the reversals and how they are handled securely in the <code>safe</code> library. According to the [EIP-721](https://eips.ethereum.org/EIPS/eip-721): _'THE CALLER IS RESPONSIBLE TO CONFIRM THAT THE <code>_to</code> IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST'_. It is advised using a <code>safeTransfer</code> library while performing NFTs transfers.",
    "path": ""
  },
  {
    "type": "low",
    "label": "open-todo",
    "title": "Open TODOs across the codebase",
    "prompt": "Having open TODO comments across the codebase not only decrease its quality but also may show non implemented features which could provide a leak of possible attack vectors. It is advised to resolve every single TODO before deploying. For the record, any implementation or feature that may result from resolving an open TODO will be out of the scope of this audit and the plausible impacts that may derive from their implementations may require further audits to be determined.",
    "path": ""
  },
  {
    "type": "low",
    "label": "revert-not-properly-bubbled",
    "title": "Reverts are not properly bubbled up if their length is shorter than 68",
    "prompt": "While checking for revert strings strictly equal than zero, any errors which length is shorter than 68 won't be covered by the mentioned strict equality causing the code not to revert via the intended way. More about this issue can be seen on [this discussion](https://ethereum.stackexchange.com/questions/83528/how-can-i-get-the-revert-reason-of-a-call-in-solidity-so-that-i-can-use-it-in-th/83529#83529).",
    "path": ""
  },
  {
    "type": "low",
    "label": "unused-receive-fallbacks",
    "title": "Empty or Unused <code>receive</code> or <code>fallback</code> function",
    "prompt": "If the mentioned functions are meant to be used they should implement a logic inside them or the contract itself should show a clear usage and dependance of them. If the contract is not intended to handle value they should revert or even not be implemented.",
    "path": ""
  },
  {
    "type": "low",
    "label": "missing-zero-address-check",
    "title": "No Zero Address checks performed when assigning address values",
    "prompt": "It is debatable if it is really needed to check that an address is not the <code>address(0)</code> while setting values for state variables. Based on past attacks or leaks that where done because of a lack of checks while setting up address values, it is advised to perform a zero address check on the following cases:",
    "path": ""
  },
  {
    "type": "low",
    "label": "insufficient-protection-sensitive-data",
    "title": "Insufficient protection of sensitive data",
    "prompt": "The <code>hardhat.config.ts</code> uses sensitive information imported from an un-committed environment file. The usage of either <code>.env</code> imported variables or even plain pasted keys make it easier for an attacker to compromise the keys used for monitoring, deployment, testing and even if wallet private keys are used in such way funds can be compromised. The following data could be compromised if a leak happens or if the <code>.gitignore</code> file is mistakenly deleted according to the imports performed on <code>hardhat.config.ts</code>: ",
    "path": ""
  },
  {
    "type": "low",
    "label": "approve-to-zero-first",
    "title": "Must approve for zero-allowance first",
    "prompt": "Some tokens approval handling (like USDT) revert when changing the allowance from an existing non-zero value. They must be first approved to zero and then the actual allowance must be set.",
    "path": ""
  },
  {
    "type": "low",
    "label": "lack-of-emitted-events",
    "title": "Important state changes should emit events",
    "prompt": "In favor of bringing transparency and increasing the trust on the protocol, it is advised to emit events while performing important state changes such as parameter changes, token flows, actions performed by the roles with higher clearance, among others. Notifying the community and offchain filtering services by emitting indexed events is recommended while performing the following actions: ",
    "path": ""
  },
  {
    "type": "low",
    "label": "avoid-abiencodepacked",
    "title": "Using <code>abi.encodePacked</code> before hashing for dynamic values can lead to hash collisions",
    "prompt": "The mentioned function concatenates directly types that are shorter than 32 bytes without padding or sign extending the value. For further information, the following link of the [official doc](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode) can be checked. Essentially, it is recommended using <code>abi.encode()</code> instead of <code>encodePacked()</code> because the first one pads the values across <code>32 bytes</code>.  According to the cited link: >If you use <code>keccak256(abi.encodePacked(a, b))</code> and both a and b are dynamic types, it is easy to craft collisions in the hash value by moving parts of a into b and vice-versa. More specifically, <code>abi.encodePacked(\"a\", \"bc\") == abi.encodePacked(\"ab\", \"c\")</code>. If you use abi.encodePacked for signatures, authentication or data integrity, make sure to always use the same types and check that at most one of them is dynamic. Unless there is a compelling reason, abi.encode should be preferred.",
    "path": ""
  }
]
